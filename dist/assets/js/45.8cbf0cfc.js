(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{479:function(v,_,t){"use strict";t.r(_);var a=t(2),l=Object(a.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"分布式系统"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分布式系统"}},[v._v("#")]),v._v(" 分布式系统")]),v._v(" "),_("p",[v._v("一个分布式系统是一些独立的计算机集合，但是对这个系统的用户来说，系统就像一台计算机一样。")]),v._v(" "),_("h3",{attrs:{id:"特征"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#特征"}},[v._v("#")]),v._v(" 特征：")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("分布性")])])]),v._v(" "),_("p",[v._v("分布式系统中的多台计算机之间在空间位置上可以随意分布，同时，机器的分布情况也会随时变动。")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("对等性")])])]),v._v(" "),_("p",[v._v("分布式系统中的计算机没有主／从之分，即没有控制整个系统的主机，也没有被控制的从机，组成分布式系统的所有计算机节点都是对等的。副本（Replica）是分布式系统最常见的概念之一，指的是分布式系统对数据和服务提供的一种冗余方式。在常见的分布式系统中，为了对外提供高可用的服务，我们往往会对数据和服务进行副本处理。数据副本是指在不同节点上持久化同一份数据，当某一个节点上存储的数据丢失时，可以从副本上读取该数据，这是解决分布式系统数据丢失问题最为有效的手段。另一类副本是服务副本，指多个节点提供同样的服务，每个节点都有能力接收来自外部的请求并进行相应的处理。")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("自治性")])])]),v._v(" "),_("p",[v._v("分布式系统中的各个节点都包含自己的处理机和内存，各自具有独立的处理数据的功能。通常，彼此在地位上是平等的，无主次之分，既能自治地进行工作，又能利用共享的通信线路来传送信息，协调任务处理。")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("并发性")])])]),v._v(" "),_("p",[v._v("在一个计算机网络中，程序运行过程的并发性操作是非常常见的行为。例如同一个分布式系统中的多个节点，可能会并发地操作一些共享的资源，如何准确并高效地协调分布式并发操作也成为了分布式系统架构与设计中最大的挑战之一。")]),v._v(" "),_("h3",{attrs:{id:"问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[v._v("#")]),v._v(" "),_("strong",[v._v("问题")]),v._v("：")]),v._v(" "),_("ul",[_("li",[v._v("缺乏全局时钟，难以定义事件发生的先后顺序")]),v._v(" "),_("li",[v._v("机器宕机")]),v._v(" "),_("li",[v._v("网络异常：消息丢失，无法通信等问题")]),v._v(" "),_("li",[v._v("分布式三态：")]),v._v(" "),_("li",[v._v("如果某个节点向另一个节点发起RPC(Remote procedure call)调用，即某个节点A 向另一个节点B 发送一个消息，节点B 根据收到的消息内容完成某些操作，并将操作的结果通过另一个消息返回给节点A，那么这个RPC 执行的结果有三种状态：“成功”、“失败”、“超时（未知）”，称之为分布式系统的三态")]),v._v(" "),_("li",[v._v("存储数据丢失")])]),v._v(" "),_("h3",{attrs:{id:"指标"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#指标"}},[v._v("#")]),v._v(" 指标")]),v._v(" "),_("ul",[_("li",[v._v("性能：系统的吞吐能力，指系统在某一时间可以处理的数据总量，通常可以用系统每秒处理的总的数据量来衡量；系统的响应延迟，指系统完成某一功能需要使用的时间；系统的并发能力，指系统可以同时完成某一功能的能力，通常也用QPS(query per second)来衡量。上述三个性能指标往往会相互制约，追求高吞吐的系统，往往很难做到低延迟；系统平均响应时间较长时，也很难提高QPS。")]),v._v(" "),_("li",[v._v("可用：指系统在面对各种异常时可以正确提供服务的能力。系统的可用性可以用系统停服务的时间与正常服务的时间的比例来衡量，也可以用某功能的失败次数与成功次数的比例来衡量。可用性是分布式的重要指标，衡量了系统的鲁棒性，是系统容错能力的体现。")]),v._v(" "),_("li",[v._v("可扩展性：系统的可扩展性(scalability)指分布式系统通过扩展集群机器规模提高系统性能（吞吐、延迟、并发）、存储容量、计算能力的特性。好的分布式系统总在追求“线性扩展性”，也就是使得系统的某一指标可以随着集群中的机器数量线性增长")]),v._v(" "),_("li",[v._v("一致性：分布式系统为了提高可用性，总是不可避免的使用副本的机制，从而引发副本一致性的问题。越是强的一致的性模型，对于用户使用来说使用起来越简单。")])]),v._v(" "),_("h3",{attrs:{id:"cap-理论"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cap-理论"}},[v._v("#")]),v._v(" CAP 理论")]),v._v(" "),_("p",[v._v("CAP理论是分布式系统、特别是分布式存储领域中被讨论的最多的理论。其中C代表一致性 (Consistency)，A代表可用性 (Availability)，P代表分区容错性 (Partition tolerance)。CAP理论告诉我们C、A、P三者不能同时满足，最多只能满足其中两个。")]),v._v(" "),_("p",[v._v("一致性（Consistency）：")]),v._v(" "),_("p",[v._v("一致性是指数据在多个副本之间能够保持一致的状态。在分布式系统中，如果所有节点都读取相同的值，就称系统具有一致性。如果每个节点都有自己的数据副本，并且每个节点都可以独立地更新其数据副本，那么就可能导致数据不一致。为了维护数据一致性，需要采取一些措施，例如使用分布式锁或者使用强一致性的复制协议（如Raft或Paxos）。")]),v._v(" "),_("p",[v._v("可用性（Availability）：")]),v._v(" "),_("p",[v._v("可用性是指系统能够处理来自客户端的请求并返回正确结果的概率。如果一个节点因为故障或其它原因不能响应请求，那么系统的可用性就会降低。为了提高系统的可用性，可以采取一些措施，例如使用冗余节点、负载均衡、故障转移等。")]),v._v(" "),_("p",[v._v("分区容错性（Partition tolerance）：")]),v._v(" "),_("p",[v._v("分区容错性是指系统能够在网络分区或者消息丢失（延迟）的情况下继续正常运行的能力。在分布式系统中，网络分区或消息丢失是很常见的问题。为了提高系统的分区容错性，可以采取一些措施，例如使用冗余节点、负载均衡、故障转移等。同时，也需要保证系统的设计能够处理网络分区或消息丢失的情况，例如使用异步通信或者采用基于leader的复制协议等。")]),v._v(" "),_("p",[v._v("在CAP理论中，这三个属性之间存在权衡关系。在设计和构建分布式系统时，需要根据实际的应用场景和需求来选择合适的架构。")]),v._v(" "),_("h3",{attrs:{id:"base理论"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#base理论"}},[v._v("#")]),v._v(" BASE理论")]),v._v(" "),_("p",[v._v("BASE是“Basically Available, Soft state, Eventually consistent”的首字母缩写。是一种用于分布式系统设计的原则，它是在CAP理论的基础上发展而来的。该理论主要由三个元素组成，分别是：")]),v._v(" "),_("ol",[_("li",[v._v("基本可用（Basically Available）：指的是系统在出现故障时，能够保证系统的基本可用性。也就是说，系统不会因为单个节点或网络故障而完全瘫痪，用户仍然可以使用系统的基本功能。")]),v._v(" "),_("li",[v._v("软状态（Soft state）：指的是系统中的状态可以在一段时间内不同步，但最终会达到一致。这种状态的不同步性并不会对系统的可用性和一致性产生太大影响。")]),v._v(" "),_("li",[v._v("最终一致性（Eventually consistent）：指的是系统中的所有数据副本最终会达到一致的状态。也就是说，系统中的数据在经过一段时间的异步处理后，最终会达到一致的状态。")])]),v._v(" "),_("p",[v._v("BASE理论的核心思想是在可用性和一致性之间进行权衡。在分布式系统中，由于网络延迟、节点故障等因素，无法总是保证强一致性。因此，BASE理论建议系统应优先考虑可用性和分区容错性，并考虑最终一致性。这种方法允许系统即使在部分故障或网络分区的情况下也能继续运行。")]),v._v(" "),_("p",[v._v("BASE理论一般应用于服务化系统的应用层或者大数据处理系统中，通过达到最终一致性来尽量满足业务的绝大多数需求。它是一种更为实际的分布式系统设计原则，能够更好地适应现代计算环境中的分布式系统的需求。")]),v._v(" "),_("h3",{attrs:{id:"分布式一致性算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分布式一致性算法"}},[v._v("#")]),v._v(" 分布式一致性算法")]),v._v(" "),_("ul",[_("li",[v._v("一致性 Hash 算法")]),v._v(" "),_("li",[v._v("Paxos 算法")]),v._v(" "),_("li",[v._v("Raft 算法")]),v._v(" "),_("li",[v._v("ZAB 算法")]),v._v(" "),_("li")])])}),[],!1,null,null,null);_.default=l.exports}}]);