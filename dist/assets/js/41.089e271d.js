(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{476:function(e,t,v){"use strict";v.r(t);var r=v(2),l=Object(r.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"tomcat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tomcat"}},[e._v("#")]),e._v(" Tomcat")]),e._v(" "),t("h3",{attrs:{id:"tomcat-中的重要部分-servlet"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tomcat-中的重要部分-servlet"}},[e._v("#")]),e._v(" Tomcat 中的重要部分 servlet")]),e._v(" "),t("p",[e._v("Servlet是一种用Java编写的服务器端程序，它是Java Servlet的简称。Servlet运行于支持Java的应用服务器中，如Tomcat等。")]),e._v(" "),t("p",[e._v("Servlet的主要功能在于交互式地浏览和生成数据，生成动态Web内容。它是一个独立于平台和协议的组件，可以响应任何类型的请求，但绝大多数情况下Servlet只用来扩展基于HTTP协议的Web服务器。")]),e._v(" "),t("p",[e._v("Servlet API是Servlet的基础，它包含四个Java包：")]),e._v(" "),t("ol",[t("li",[e._v("javax.servlet包：定义了Servlet接口和基类，以及与Servlet相关的类和接口。")]),e._v(" "),t("li",[e._v("javax.servlet.http包：定义了HTTP Servlet类和相关的接口，支持HTTP协议的特性和功能。")]),e._v(" "),t("li",[e._v("javax.servlet.annotation包：定义了Servlet注解类型，用于在Servlet类上标注和处理Servlet相关的元数据。")]),e._v(" "),t("li",[e._v("javax.servlet.descriptor包：定义了Servlet描述符接口和相关的类和接口，用于描述Servlet的配置信息。")])]),e._v(" "),t("p",[e._v("Servlet的功能需要依赖一个servlet-api.jar包，这个包是由Tomcat等应用服务器提供的。在Tomcat中，Servlet是Tomcat的一个组件，它的功能需要依赖Tomcat提供的servlet-api.jar包和其他相关的库文件。")]),e._v(" "),t("p",[e._v("Servlet是一种重要的Java Web技术，它提供了一种标准的、通用的、可移植的机制来扩展Web服务器的功能，并能够生成动态Web内容。")]),e._v(" "),t("p",[e._v("一个Servlet主要做下面三件事情：")]),e._v(" "),t("ul",[t("li",[e._v("创建并填充Request对象，包括：URI、参数、method、请求头信息、请求体信息等")]),e._v(" "),t("li",[e._v("创建Response对象")]),e._v(" "),t("li",[e._v("执行业务逻辑，将结果通过Response的输出流输出到客户端")])]),e._v(" "),t("h3",{attrs:{id:"tomcat-架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tomcat-架构"}},[e._v("#")]),e._v(" Tomcat 架构")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://s2.loli.net/2023/12/06/pcqLzn3eYa4gXKb.png",alt:""}})]),e._v(" "),t("p",[t("strong",[e._v("Server")]),e._v(": 表示服务器，它提供了一种优雅的方式来启动和停止整个系统，不必单独启停连接器和容器；它是Tomcat构成的顶级构成元素，所有一切均包含在Server中；")]),e._v(" "),t("p",[t("strong",[e._v("Service")]),e._v(": 表示服务，Server可以运行多个服务。比如一个Tomcat里面可运行订单服务、支付服务、用户服务等等；Server的实现类StandardServer可以包含一个到多个Services, Service的实现类为StandardService调用了容器(Container)接口，其实是调用了Servlet Engine(引擎)，而且StandardService类中也指明了该Service归属的Server;")]),e._v(" "),t("p",[t("strong",[e._v("Container")]),e._v(": 表示容器，可以看做Servlet容器；引擎(Engine)、主机(Host)、上下文(Context)和Wraper均继承自Container接口，所以它们都是容器。")]),e._v(" "),t("ul",[t("li",[e._v("Engine -- 引擎")]),e._v(" "),t("li",[e._v("Host -- 主机")]),e._v(" "),t("li",[e._v("Context -- 上下文")]),e._v(" "),t("li",[e._v("Wrapper -- 包装器")])]),e._v(" "),t("p",[t("strong",[e._v("Connector")]),e._v(": 表示连接器, "),t("strong",[e._v("它将Service和Container连接起来")]),e._v("，首先它需要注册到一个Service，它的作用就是把来自客户端的请求转发到Container(容器)，这就是它为什么称作连接器, 它支持的协议如下：")]),e._v(" "),t("ul",[t("li",[e._v("支持AJP协议")]),e._v(" "),t("li",[e._v("支持Http协议")]),e._v(" "),t("li",[e._v("支持Https协议")])]),e._v(" "),t("p",[t("strong",[e._v("Service内部")]),e._v("还有各种支撑组件，下面简单罗列一下这些组件")]),e._v(" "),t("ul",[t("li",[e._v("Manager -- 管理器，用于管理会话Session")]),e._v(" "),t("li",[e._v("Logger -- 日志器，用于管理日志")]),e._v(" "),t("li",[e._v("Loader -- 加载器，和类加载有关，只会开放给Context所使用")]),e._v(" "),t("li",[e._v("Pipeline -- 管道组件，配合Valve实现过滤器功能")]),e._v(" "),t("li",[e._v("Valve -- 阀门组件，配合Pipeline实现过滤器功能")]),e._v(" "),t("li",[e._v("Realm -- 认证授权组件")])]),e._v(" "),t("p",[t("strong",[e._v("一个可能的请求过程")]),e._v("：假设来自客户的请求为：http://localhost:8080/test/index.jsp 请求被发送到本机端口8080，被在那里侦听的Coyote HTTP/1.1 Connector侦听到,然后")]),e._v(" "),t("ul",[t("li",[e._v("Connector把该请求交给它所在的Service的Engine来处理，并等待Engine的回应")]),e._v(" "),t("li",[e._v("Engine获得请求localhost:8080/test/index.jsp，匹配它所有虚拟主机Host")]),e._v(" "),t("li",[e._v("Engine匹配到名为localhost的Host(即使匹配不到也把请求交给该Host处理，因为该Host被定义为该Engine的默认主机)")]),e._v(" "),t("li",[e._v("localhost Host获得请求/test/index.jsp，匹配它所拥有的所有Context")]),e._v(" "),t("li",[e._v('Host匹配到路径为/test的Context(如果匹配不到就把该请求交给路径名为""的Context去处理)')]),e._v(" "),t("li",[e._v('path="/test"的Context获得请求/index.jsp，在它的mapping table中寻找对应的servlet')]),e._v(" "),t("li",[e._v("Context匹配到URL PATTERN为*.jsp的servlet，对应于JspServlet类，构造HttpServletRequest对象和HttpServletResponse对象，作为参数调用JspServlet的doGet或doPost方法")]),e._v(" "),t("li",[e._v("Context把执行完了之后的HttpServletResponse对象返回给Host")]),e._v(" "),t("li",[e._v("Host把HttpServletResponse对象返回给Engine")]),e._v(" "),t("li",[e._v("Engine把HttpServletResponse对象返回给Connector")]),e._v(" "),t("li",[e._v("Connector把HttpServletResponse对象返回给客户browser")])])])}),[],!1,null,null,null);t.default=l.exports}}]);