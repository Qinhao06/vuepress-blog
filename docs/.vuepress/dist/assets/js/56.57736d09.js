(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{494:function(v,_,a){"use strict";a.r(_);var t=a(2),s=Object(t.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"类的生命周期"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#类的生命周期"}},[v._v("#")]),v._v(" 类的生命周期")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://s2.loli.net/2023/11/27/qBNK3F2VnphzeRy.png",alt:"img"}})]),v._v(" "),_("p",[v._v("其中类加载的过程包括了"),_("code",[v._v("加载")]),v._v("、"),_("code",[v._v("验证")]),v._v("、"),_("code",[v._v("准备")]),v._v("、"),_("code",[v._v("解析")]),v._v("、"),_("code",[v._v("初始化")]),v._v("五个阶段。在这五个阶段中，"),_("code",[v._v("加载")]),v._v("、"),_("code",[v._v("验证")]),v._v("、"),_("code",[v._v("准备")]),v._v("和"),_("code",[v._v("初始化")]),v._v("这四个阶段发生的顺序是确定的，"),_("em",[v._v("而"),_("code",[v._v("解析")]),v._v("阶段则不一定，它在某些情况下可以在初始化阶段之后开始，这是为了支持Java语言的运行时绑定(也成为动态绑定或晚期绑定)")]),v._v("。另外注意这里的几个阶段是按顺序开始，而不是按顺序进行或完成，因为这些阶段通常都是互相交叉地混合进行的，通常在一个阶段执行的过程中调用或激活另一个阶段。")]),v._v(" "),_("h3",{attrs:{id:"加载"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#加载"}},[v._v("#")]),v._v(" 加载")]),v._v(" "),_("p",[v._v("加载时类加载过程的第一个阶段，在加载阶段，虚拟机需要完成以下三件事情:")]),v._v(" "),_("ul",[_("li",[v._v("通过一个类的全限定名来获取其定义的二进制字节流。")]),v._v(" "),_("li",[v._v("将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。")]),v._v(" "),_("li",[v._v("在Java堆中生成一个代表这个类的java.lang.Class对象，作为对方法区中这些数据的访问入口。")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://s2.loli.net/2023/11/27/YUaPDzp6lumZiSN.png",alt:"img"}})]),v._v(" "),_("p",[_("strong",[v._v("类加载器")]),v._v("：")]),v._v(" "),_("p",[v._v("类加载可以通过命令行由 jvm 加载，forName，loadClass")]),v._v(" "),_("p",[v._v("Class.forName(): 将类的.class文件加载到jvm中之外，还会对类进行解释，执行类中的static块；")]),v._v(" "),_("p",[v._v("ClassLoader.loadClass(): 只干一件事情，就是将.class文件加载到jvm中，不会执行static中的内容,只有在newInstance才会去执行static块。")]),v._v(" "),_("p",[v._v("Class.forName(name, initialize, loader)带参函数也可控制是否加载static块。并且只有调用了newInstance()方法采用调用构造函数，创建类的")]),v._v(" "),_("h3",{attrs:{id:"连接"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#连接"}},[v._v("#")]),v._v(" 连接")]),v._v(" "),_("p",[v._v("用于确保被加载类的正确性，需要完成文件格式验证，元数据验证，字节码验证，符号引用验证")]),v._v(" "),_("h3",{attrs:{id:"准备"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#准备"}},[v._v("#")]),v._v(" 准备")]),v._v(" "),_("p",[v._v("准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，"),_("strong",[v._v("这些内存都将在方法区中分配")]),v._v("。对于该阶段有以下几点需要注意:")]),v._v(" "),_("ul",[_("li",[v._v("这时候进行内存分配的仅包括类变量("),_("code",[v._v("static")]),v._v(")，而不包括实例变量，实例变量会在对象实例化时随着对象一块分配在Java堆中。")]),v._v(" "),_("li",[v._v("这里所设置的初始值通常情况下是数据类型默认的零值(如"),_("code",[v._v("0")]),v._v("、"),_("code",[v._v("0L")]),v._v("、"),_("code",[v._v("null")]),v._v("、"),_("code",[v._v("false")]),v._v("等)，而不是被在Java代码中被显式地赋予的值。")]),v._v(" "),_("li",[v._v("假设一个类变量的定义为: "),_("code",[v._v("public static int value = 3")]),v._v("；那么变量value在准备阶段过后的初始值为"),_("code",[v._v("0")]),v._v("，而不是"),_("code",[v._v("3")]),v._v("，因为这时候尚未开始执行任何Java方法，而把value赋值为3的"),_("code",[v._v("put static")]),v._v("指令是在程序编译后，存放于类构造器"),_("code",[v._v("<clinit>()")]),v._v("方法之中的，所以把value赋值为3的动作将在初始化阶段才会执行。")]),v._v(" "),_("li",[v._v("对基本数据类型来说，对于类变量(static)和全局变量，如果不显式地对其赋值而直接使用，则系统会为其赋予默认的零值，而对于局部变量来说，在使用前必须显式地为其赋值，否则编译时不通过。")]),v._v(" "),_("li",[v._v("对于同时被"),_("code",[v._v("static")]),v._v("和"),_("code",[v._v("final")]),v._v("修饰的常量，必须在声明的时候就为其显式地赋值，否则编译时不通过；而只被final修饰的常量则既可以在声明时显式地为其赋值，也可以在类初始化时显式地为其赋值，总之，在使用前必须为其显式地赋值，系统不会为其赋予默认零值。")]),v._v(" "),_("li",[v._v("对于引用数据类型"),_("code",[v._v("reference")]),v._v("来说，如数组引用、对象引用等，如果没有对其进行显式地赋值而直接使用，系统都会为其赋予默认的零值，即"),_("code",[v._v("null")]),v._v("。")]),v._v(" "),_("li",[v._v("如果在数组初始化时没有对数组中的各元素赋值，那么其中的元素将根据对应的数据类型而被赋予默认的零值。")]),v._v(" "),_("li",[v._v("如果类字段的字段属性表中存在ConstantValue属性，即同时被final和static修饰，那么在准备阶段变量value就会被初始化为ConstValue属性所指定的值。假设上面的类变量value被定义为: "),_("code",[v._v("public static final int value = 3；")]),v._v("编译时Javac将会为value生成ConstantValue属性，在准备阶段虚拟机就会根据ConstantValue的设置将value赋值为3。我们可以理解为"),_("code",[v._v("static final")]),v._v("常量在编译期就将其结果放入了调用它的类的常量池中。")])]),v._v(" "),_("h3",{attrs:{id:"解析"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#解析"}},[v._v("#")]),v._v(" 解析")]),v._v(" "),_("p",[v._v("将常量池内的符号引用替换为直接引用的过程，解析动作主要针对"),_("code",[v._v("类")]),v._v("或"),_("code",[v._v("接口")]),v._v("、"),_("code",[v._v("字段")]),v._v("、"),_("code",[v._v("类方法")]),v._v("、"),_("code",[v._v("接口方法")]),v._v("、"),_("code",[v._v("方法类型")]),v._v("、"),_("code",[v._v("方法句柄")]),v._v("和"),_("code",[v._v("调用点")]),v._v("限定符7类符号引用进行。符号引用就是一组符号来描述目标，可以是任何字面量。")]),v._v(" "),_("p",[_("code",[v._v("直接引用")]),v._v("就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄")]),v._v(" "),_("h3",{attrs:{id:"初始化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#初始化"}},[v._v("#")]),v._v(" 初始化")]),v._v(" "),_("p",[v._v("初始化，为类的静态变量赋予正确的初始值，JVM负责对类进行初始化，主要对类变量进行初始化。在Java中对类变量进行初始值设定有两种方式:")]),v._v(" "),_("ul",[_("li",[v._v("声明类变量是指定初始值")]),v._v(" "),_("li",[v._v("使用静态代码块为类变量指定初始值")])]),v._v(" "),_("p",[_("strong",[v._v("JVM初始化步骤")])]),v._v(" "),_("ul",[_("li",[v._v("假如这个类还没有被加载和连接，则程序先加载并连接该类")]),v._v(" "),_("li",[v._v("假如该类的直接父类还没有被初始化，则先初始化其直接父类")]),v._v(" "),_("li",[v._v("假如类中有初始化语句，则系统依次执行这些初始化语句")])]),v._v(" "),_("p",[_("strong",[v._v("类初始化时机")]),v._v(": 只有当对类的主动使用的时候才会导致类的初始化，类的主动使用包括以下六种:")]),v._v(" "),_("ul",[_("li",[v._v("创建类的实例，也就是new的方式")]),v._v(" "),_("li",[v._v("访问某个类或接口的静态变量，或者对该静态变量赋值")]),v._v(" "),_("li",[v._v("调用类的静态方法")]),v._v(" "),_("li",[v._v('反射(如Class.forName("com.pdai.jvm.Test"))')]),v._v(" "),_("li",[v._v("初始化某个类的子类，则其父类也会被初始化")]),v._v(" "),_("li",[v._v("Java虚拟机启动时被标明为启动类的类(Java Test)，直接使用java.exe命令来运行某个主类")])]),v._v(" "),_("h3",{attrs:{id:"使用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[v._v("#")]),v._v(" 使用")]),v._v(" "),_("h3",{attrs:{id:"卸载"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#卸载"}},[v._v("#")]),v._v(" 卸载")]),v._v(" "),_("p",[v._v("进程根据各种情况结束")]),v._v(" "),_("h2",{attrs:{id:"jvm-加载规则"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jvm-加载规则"}},[v._v("#")]),v._v(" JVM 加载规则")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("默认由一个类加载器负责Class及其依赖引用的 Class。")])]),v._v(" "),_("li",[_("p",[v._v("父加载器优先加载，无法加载才由自己加载-双亲委派机制，可以防止出现多个一样的字节码，同时保证核心类的安全，防止被恶意替换")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://s2.loli.net/2023/11/27/jz2bEITL4xH5XPl.webp",alt:"img"}})])]),v._v(" "),_("li",[_("p",[v._v("加载过的 Class 都会被缓存")])])])])}),[],!1,null,null,null);_.default=s.exports}}]);