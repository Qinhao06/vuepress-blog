(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{473:function(t,a,s){"use strict";s.r(a);var r=s(2),v=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),a("p",[t._v("单元测试（unit testing），是指对软件中的最小可测试单元进行检查和验证。对于单元测试中单元的含义，一般来说，要根据实际情况去判定其具体含义，如C语言中单元指一个函数，Java里单元指一个类，图形化的软件中可以指一个窗口或一个菜单等。总的来说，单元就是人为规定的最小的被测功能模块。单元测试是在软件开发过程中要进行的最低级别的测试活动，软件的独立单元将在与程序的其他部分相隔离的情况下进行测试。")]),t._v(" "),a("h3",{attrs:{id:"写单元测试时间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#写单元测试时间"}},[t._v("#")]),t._v(" 写单元测试时间")]),t._v(" "),a("p",[t._v("建议在具体实现开始前或边开发边写。")]),t._v(" "),a("h3",{attrs:{id:"单元测试要写多细"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单元测试要写多细"}},[t._v("#")]),t._v(" 单元测试要写多细？")]),t._v(" "),a("p",[t._v("单元测试不是越多越好，而是越有效越好！进一步解读就是哪些代码需要有单元测试覆盖：")]),t._v(" "),a("ul",[a("li",[t._v("逻辑复杂的")]),t._v(" "),a("li",[t._v("容易出错的")]),t._v(" "),a("li",[t._v("不易理解的，即使是自己过段时间也会遗忘的，看不懂自己的代码，单元测试代码有助于理解代码的功能和需求")]),t._v(" "),a("li",[t._v("公共代码。比如自定义的所有http请求都会经过的拦截器；工具类等。")]),t._v(" "),a("li",[t._v("核心业务代码。一个产品里最核心最有业务价值的代码应该要有较高的单元测试覆盖率。")])]),t._v(" "),a("h3",{attrs:{id:"junit4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#junit4"}},[t._v("#")]),t._v(" JUnit4")])])}),[],!1,null,null,null);a.default=v.exports}}]);