(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{493:function(t,e,a){"use strict";a.r(e);var n=a(2),r=Object(n.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"volatile-关键字"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#volatile-关键字"}},[t._v("#")]),t._v(" volatile 关键字")]),t._v(" "),e("p",[t._v("每次获取变量需要到主内存中去获取，而不是在工作内存中获取。")]),t._v(" "),e("h3",{attrs:{id:"保证可见性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#保证可见性"}},[t._v("#")]),t._v(" 保证可见性")]),t._v(" "),e("p",[t._v("public class TestVolatile {\nprivate volatile static boolean stop = false;")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('public static void main(String[] args) {\n    // Thread-A\n    new Thread("Thread A") {\n        @Override\n        public void run() {\n            while (!stop) {\n            }\n            System.out.println(Thread.currentThread() + " stopped");\n        }\n    }.start();\n\n    // Thread-main\n    try {\n        TimeUnit.SECONDS.sleep(1);\n        System.out.println(Thread.currentThread() + " after 1 seconds");\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n    stop = true;\n}\n')])])]),e("p",[t._v("}")]),t._v(" "),e("p",[t._v("对于该程序如果不加入volatile，线程 A 则会一直执行。")]),t._v(" "),e("p",[t._v("可见性是基于内存屏障实现，底层中加入 lock 指令：")]),t._v(" "),e("ul",[e("li",[t._v("将当前处理器缓存行的数据写回到系统内存。")]),t._v(" "),e("li",[t._v("写回内存的操作会使在其他 CPU 里缓存了该内存地址的数据无效\n同时 CPU 之间实现了缓存一致性协议(MESI)。每个处理器通过嗅探在总线上传播的数据来检查自己缓存的值是不是过期了，当处理器发现自己缓存行对应的内存地址被修改，就会将当前处理器的缓存行设置成无效状态，当处理器对这个数据进行修改操作的时候，会重新从系统内存中把数据读到处理器缓存里。")])]),t._v(" "),e("h3",{attrs:{id:"不保证完全原子性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#不保证完全原子性"}},[t._v("#")]),t._v(" 不保证完全原子性")]),t._v(" "),e("p",[t._v("volatile不能保证完全的原子性，只能保证单次的读/写操作具有原子性。")])])}),[],!1,null,null,null);e.default=r.exports}}]);